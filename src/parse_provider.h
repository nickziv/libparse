/*
 * Generated by dtrace(1M).
 */

#ifndef	_PARSE_PROVIDER_H
#define	_PARSE_PROVIDER_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#if _DTRACE_VERSION

#define	PARSE_AST_ADD_CHILD(arg0, arg1, arg2) \
	__dtrace_parse___ast_add_child(arg0, arg1, arg2)
#ifndef	__sparc
#define	PARSE_AST_ADD_CHILD_ENABLED() \
	__dtraceenabled_parse___ast_add_child()
#else
#define	PARSE_AST_ADD_CHILD_ENABLED() \
	__dtraceenabled_parse___ast_add_child(0)
#endif
#define	PARSE_AST_NODE_OFF_END(arg0, arg1) \
	__dtrace_parse___ast_node_off_end(arg0, arg1)
#ifndef	__sparc
#define	PARSE_AST_NODE_OFF_END_ENABLED() \
	__dtraceenabled_parse___ast_node_off_end()
#else
#define	PARSE_AST_NODE_OFF_END_ENABLED() \
	__dtraceenabled_parse___ast_node_off_end(0)
#endif
#define	PARSE_AST_NODE_OFF_START(arg0, arg1) \
	__dtrace_parse___ast_node_off_start(arg0, arg1)
#ifndef	__sparc
#define	PARSE_AST_NODE_OFF_START_ENABLED() \
	__dtraceenabled_parse___ast_node_off_start()
#else
#define	PARSE_AST_NODE_OFF_START_ENABLED() \
	__dtraceenabled_parse___ast_node_off_start(0)
#endif
#define	PARSE_AST_POP(arg0) \
	__dtrace_parse___ast_pop(arg0)
#ifndef	__sparc
#define	PARSE_AST_POP_ENABLED() \
	__dtraceenabled_parse___ast_pop()
#else
#define	PARSE_AST_POP_ENABLED() \
	__dtraceenabled_parse___ast_pop(0)
#endif
#define	PARSE_AST_PUSH(arg0) \
	__dtrace_parse___ast_push(arg0)
#ifndef	__sparc
#define	PARSE_AST_PUSH_ENABLED() \
	__dtraceenabled_parse___ast_push()
#else
#define	PARSE_AST_PUSH_ENABLED() \
	__dtraceenabled_parse___ast_push(0)
#endif
#define	PARSE_AST_REM_CHILD(arg0, arg1, arg2) \
	__dtrace_parse___ast_rem_child(arg0, arg1, arg2)
#ifndef	__sparc
#define	PARSE_AST_REM_CHILD_ENABLED() \
	__dtraceenabled_parse___ast_rem_child()
#else
#define	PARSE_AST_REM_CHILD_ENABLED() \
	__dtraceenabled_parse___ast_rem_child(0)
#endif
#define	PARSE_BIND_BEGIN() \
	__dtrace_parse___bind_begin()
#ifndef	__sparc
#define	PARSE_BIND_BEGIN_ENABLED() \
	__dtraceenabled_parse___bind_begin()
#else
#define	PARSE_BIND_BEGIN_ENABLED() \
	__dtraceenabled_parse___bind_begin(0)
#endif
#define	PARSE_BIND_END() \
	__dtrace_parse___bind_end()
#ifndef	__sparc
#define	PARSE_BIND_END_ENABLED() \
	__dtraceenabled_parse___bind_end()
#else
#define	PARSE_BIND_END_ENABLED() \
	__dtraceenabled_parse___bind_end(0)
#endif
#define	PARSE_CREATE_AST(arg0) \
	__dtrace_parse___create_ast(arg0)
#ifndef	__sparc
#define	PARSE_CREATE_AST_ENABLED() \
	__dtraceenabled_parse___create_ast()
#else
#define	PARSE_CREATE_AST_ENABLED() \
	__dtraceenabled_parse___create_ast(0)
#endif
#define	PARSE_CREATE_AST_NODE(arg0, arg1) \
	__dtrace_parse___create_ast_node(arg0, arg1)
#ifndef	__sparc
#define	PARSE_CREATE_AST_NODE_ENABLED() \
	__dtraceenabled_parse___create_ast_node()
#else
#define	PARSE_CREATE_AST_NODE_ENABLED() \
	__dtraceenabled_parse___create_ast_node(0)
#endif
#define	PARSE_CREATE_GRMR(arg0) \
	__dtrace_parse___create_grmr(arg0)
#ifndef	__sparc
#define	PARSE_CREATE_GRMR_ENABLED() \
	__dtraceenabled_parse___create_grmr()
#else
#define	PARSE_CREATE_GRMR_ENABLED() \
	__dtraceenabled_parse___create_grmr(0)
#endif
#define	PARSE_CREATE_GRMR_NODE(arg0, arg1, arg2) \
	__dtrace_parse___create_grmr_node(arg0, arg1, arg2)
#ifndef	__sparc
#define	PARSE_CREATE_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___create_grmr_node()
#else
#define	PARSE_CREATE_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___create_grmr_node(0)
#endif
#define	PARSE_CREATE_TOK(arg0) \
	__dtrace_parse___create_tok(arg0)
#ifndef	__sparc
#define	PARSE_CREATE_TOK_ENABLED() \
	__dtraceenabled_parse___create_tok()
#else
#define	PARSE_CREATE_TOK_ENABLED() \
	__dtraceenabled_parse___create_tok(0)
#endif
#define	PARSE_CURSOR(arg0, arg1) \
	__dtrace_parse___cursor(arg0, arg1)
#ifndef	__sparc
#define	PARSE_CURSOR_ENABLED() \
	__dtraceenabled_parse___cursor()
#else
#define	PARSE_CURSOR_ENABLED() \
	__dtraceenabled_parse___cursor(0)
#endif
#define	PARSE_DESTROY_AST_NODE(arg0) \
	__dtrace_parse___destroy_ast_node(arg0)
#ifndef	__sparc
#define	PARSE_DESTROY_AST_NODE_ENABLED() \
	__dtraceenabled_parse___destroy_ast_node()
#else
#define	PARSE_DESTROY_AST_NODE_ENABLED() \
	__dtraceenabled_parse___destroy_ast_node(0)
#endif
#define	PARSE_DESTROY_GRMR_NODE(arg0, arg1) \
	__dtrace_parse___destroy_grmr_node(arg0, arg1)
#ifndef	__sparc
#define	PARSE_DESTROY_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___destroy_grmr_node()
#else
#define	PARSE_DESTROY_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___destroy_grmr_node(0)
#endif
#define	PARSE_EVAL_TOK(arg0, arg1, arg2) \
	__dtrace_parse___eval_tok(arg0, arg1, arg2)
#ifndef	__sparc
#define	PARSE_EVAL_TOK_ENABLED() \
	__dtraceenabled_parse___eval_tok()
#else
#define	PARSE_EVAL_TOK_ENABLED() \
	__dtraceenabled_parse___eval_tok(0)
#endif
#define	PARSE_FAIL(arg0) \
	__dtrace_parse___fail(arg0)
#ifndef	__sparc
#define	PARSE_FAIL_ENABLED() \
	__dtraceenabled_parse___fail()
#else
#define	PARSE_FAIL_ENABLED() \
	__dtraceenabled_parse___fail(0)
#endif
#define	PARSE_FINISH_AST_NODE(arg0, arg1) \
	__dtrace_parse___finish_ast_node(arg0, arg1)
#ifndef	__sparc
#define	PARSE_FINISH_AST_NODE_ENABLED() \
	__dtraceenabled_parse___finish_ast_node()
#else
#define	PARSE_FINISH_AST_NODE_ENABLED() \
	__dtraceenabled_parse___finish_ast_node(0)
#endif
#define	PARSE_GOT_HERE(arg0) \
	__dtrace_parse___got_here(arg0)
#ifndef	__sparc
#define	PARSE_GOT_HERE_ENABLED() \
	__dtraceenabled_parse___got_here()
#else
#define	PARSE_GOT_HERE_ENABLED() \
	__dtraceenabled_parse___got_here(0)
#endif
#define	PARSE_GRMR_ADD_CHILD(arg0, arg1, arg2, arg3) \
	__dtrace_parse___grmr_add_child(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	PARSE_GRMR_ADD_CHILD_ENABLED() \
	__dtraceenabled_parse___grmr_add_child()
#else
#define	PARSE_GRMR_ADD_CHILD_ENABLED() \
	__dtraceenabled_parse___grmr_add_child(0)
#endif
#define	PARSE_INPUT_END(arg0) \
	__dtrace_parse___input_end(arg0)
#ifndef	__sparc
#define	PARSE_INPUT_END_ENABLED() \
	__dtraceenabled_parse___input_end()
#else
#define	PARSE_INPUT_END_ENABLED() \
	__dtraceenabled_parse___input_end(0)
#endif
#define	PARSE_MATCH(arg0) \
	__dtrace_parse___match(arg0)
#ifndef	__sparc
#define	PARSE_MATCH_ENABLED() \
	__dtraceenabled_parse___match()
#else
#define	PARSE_MATCH_ENABLED() \
	__dtraceenabled_parse___match(0)
#endif
#define	PARSE_MATCH_PART(arg0) \
	__dtrace_parse___match_part(arg0)
#ifndef	__sparc
#define	PARSE_MATCH_PART_ENABLED() \
	__dtraceenabled_parse___match_part()
#else
#define	PARSE_MATCH_PART_ENABLED() \
	__dtraceenabled_parse___match_part(0)
#endif
#define	PARSE_MATCHED_BITS(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_parse___matched_bits(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	PARSE_MATCHED_BITS_ENABLED() \
	__dtraceenabled_parse___matched_bits()
#else
#define	PARSE_MATCHED_BITS_ENABLED() \
	__dtraceenabled_parse___matched_bits(0)
#endif
#define	PARSE_NESTING(arg0) \
	__dtrace_parse___nesting(arg0)
#ifndef	__sparc
#define	PARSE_NESTING_ENABLED() \
	__dtraceenabled_parse___nesting()
#else
#define	PARSE_NESTING_ENABLED() \
	__dtraceenabled_parse___nesting(0)
#endif
#define	PARSE_PARSE() \
	__dtrace_parse___parse()
#ifndef	__sparc
#define	PARSE_PARSE_ENABLED() \
	__dtraceenabled_parse___parse()
#else
#define	PARSE_PARSE_ENABLED() \
	__dtraceenabled_parse___parse(0)
#endif
#define	PARSE_REPEAT(arg0) \
	__dtrace_parse___repeat(arg0)
#ifndef	__sparc
#define	PARSE_REPEAT_ENABLED() \
	__dtraceenabled_parse___repeat()
#else
#define	PARSE_REPEAT_ENABLED() \
	__dtraceenabled_parse___repeat(0)
#endif
#define	PARSE_REPEAT_RETRY(arg0) \
	__dtrace_parse___repeat_retry(arg0)
#ifndef	__sparc
#define	PARSE_REPEAT_RETRY_ENABLED() \
	__dtraceenabled_parse___repeat_retry()
#else
#define	PARSE_REPEAT_RETRY_ENABLED() \
	__dtraceenabled_parse___repeat_retry(0)
#endif
#define	PARSE_RESET_GRMR_NODE(arg0, arg1, arg2) \
	__dtrace_parse___reset_grmr_node(arg0, arg1, arg2)
#ifndef	__sparc
#define	PARSE_RESET_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___reset_grmr_node()
#else
#define	PARSE_RESET_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___reset_grmr_node(0)
#endif
#define	PARSE_RUN_GRMR_BEGIN(arg0, arg1) \
	__dtrace_parse___run_grmr_begin(arg0, arg1)
#ifndef	__sparc
#define	PARSE_RUN_GRMR_BEGIN_ENABLED() \
	__dtraceenabled_parse___run_grmr_begin()
#else
#define	PARSE_RUN_GRMR_BEGIN_ENABLED() \
	__dtraceenabled_parse___run_grmr_begin(0)
#endif
#define	PARSE_RUN_GRMR_END(arg0, arg1) \
	__dtrace_parse___run_grmr_end(arg0, arg1)
#ifndef	__sparc
#define	PARSE_RUN_GRMR_END_ENABLED() \
	__dtraceenabled_parse___run_grmr_end()
#else
#define	PARSE_RUN_GRMR_END_ENABLED() \
	__dtraceenabled_parse___run_grmr_end(0)
#endif
#define	PARSE_SET_ROOT(arg0, arg1) \
	__dtrace_parse___set_root(arg0, arg1)
#ifndef	__sparc
#define	PARSE_SET_ROOT_ENABLED() \
	__dtraceenabled_parse___set_root()
#else
#define	PARSE_SET_ROOT_ENABLED() \
	__dtraceenabled_parse___set_root(0)
#endif
#define	PARSE_SPLIT(arg0) \
	__dtrace_parse___split(arg0)
#ifndef	__sparc
#define	PARSE_SPLIT_ENABLED() \
	__dtraceenabled_parse___split()
#else
#define	PARSE_SPLIT_ENABLED() \
	__dtraceenabled_parse___split(0)
#endif
#define	PARSE_STACK_ELEMS(arg0, arg1) \
	__dtrace_parse___stack_elems(arg0, arg1)
#ifndef	__sparc
#define	PARSE_STACK_ELEMS_ENABLED() \
	__dtraceenabled_parse___stack_elems()
#else
#define	PARSE_STACK_ELEMS_ENABLED() \
	__dtraceenabled_parse___stack_elems(0)
#endif
#define	PARSE_TEST_AST_NODE(arg0) \
	__dtrace_parse___test_ast_node(arg0)
#ifndef	__sparc
#define	PARSE_TEST_AST_NODE_ENABLED() \
	__dtraceenabled_parse___test_ast_node()
#else
#define	PARSE_TEST_AST_NODE_ENABLED() \
	__dtraceenabled_parse___test_ast_node(0)
#endif
#define	PARSE_TEST_DFS_COOKIE(arg0) \
	__dtrace_parse___test_dfs_cookie(arg0)
#ifndef	__sparc
#define	PARSE_TEST_DFS_COOKIE_ENABLED() \
	__dtraceenabled_parse___test_dfs_cookie()
#else
#define	PARSE_TEST_DFS_COOKIE_ENABLED() \
	__dtraceenabled_parse___test_dfs_cookie(0)
#endif
#define	PARSE_TEST_GRMR_NODE(arg0) \
	__dtrace_parse___test_grmr_node(arg0)
#ifndef	__sparc
#define	PARSE_TEST_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___test_grmr_node()
#else
#define	PARSE_TEST_GRMR_NODE_ENABLED() \
	__dtraceenabled_parse___test_grmr_node(0)
#endif
#define	PARSE_TEST_MATCH(arg0) \
	__dtrace_parse___test_match(arg0)
#ifndef	__sparc
#define	PARSE_TEST_MATCH_ENABLED() \
	__dtraceenabled_parse___test_match()
#else
#define	PARSE_TEST_MATCH_ENABLED() \
	__dtraceenabled_parse___test_match(0)
#endif
#define	PARSE_TEST_TOKEN(arg0) \
	__dtrace_parse___test_token(arg0)
#ifndef	__sparc
#define	PARSE_TEST_TOKEN_ENABLED() \
	__dtraceenabled_parse___test_token()
#else
#define	PARSE_TEST_TOKEN_ENABLED() \
	__dtraceenabled_parse___test_token(0)
#endif
#define	PARSE_TRACE_AST(arg0, arg1, arg2, arg3) \
	__dtrace_parse___trace_ast(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	PARSE_TRACE_AST_ENABLED() \
	__dtraceenabled_parse___trace_ast()
#else
#define	PARSE_TRACE_AST_ENABLED() \
	__dtraceenabled_parse___trace_ast(0)
#endif
#define	PARSE_UNMATCHED_BITS(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_parse___unmatched_bits(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	PARSE_UNMATCHED_BITS_ENABLED() \
	__dtraceenabled_parse___unmatched_bits()
#else
#define	PARSE_UNMATCHED_BITS_ENABLED() \
	__dtraceenabled_parse___unmatched_bits(0)
#endif


extern void __dtrace_parse___ast_add_child(lp_grmr_t *, lp_ast_node_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_add_child(void);
#else
extern int __dtraceenabled_parse___ast_add_child(long);
#endif
extern void __dtrace_parse___ast_node_off_end(lp_grmr_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_node_off_end(void);
#else
extern int __dtraceenabled_parse___ast_node_off_end(long);
#endif
extern void __dtrace_parse___ast_node_off_start(lp_grmr_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_node_off_start(void);
#else
extern int __dtraceenabled_parse___ast_node_off_start(long);
#endif
extern void __dtrace_parse___ast_pop(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_pop(void);
#else
extern int __dtraceenabled_parse___ast_pop(long);
#endif
extern void __dtrace_parse___ast_push(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_push(void);
#else
extern int __dtraceenabled_parse___ast_push(long);
#endif
extern void __dtrace_parse___ast_rem_child(lp_grmr_t *, lp_ast_node_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___ast_rem_child(void);
#else
extern int __dtraceenabled_parse___ast_rem_child(long);
#endif
extern void __dtrace_parse___bind_begin(void);
#ifndef	__sparc
extern int __dtraceenabled_parse___bind_begin(void);
#else
extern int __dtraceenabled_parse___bind_begin(long);
#endif
extern void __dtrace_parse___bind_end(void);
#ifndef	__sparc
extern int __dtraceenabled_parse___bind_end(void);
#else
extern int __dtraceenabled_parse___bind_end(long);
#endif
extern void __dtrace_parse___create_ast(lp_ast_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___create_ast(void);
#else
extern int __dtraceenabled_parse___create_ast(long);
#endif
extern void __dtrace_parse___create_ast_node(lp_grmr_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___create_ast_node(void);
#else
extern int __dtraceenabled_parse___create_ast_node(long);
#endif
extern void __dtrace_parse___create_grmr(lp_grmr_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___create_grmr(void);
#else
extern int __dtraceenabled_parse___create_grmr(long);
#endif
extern void __dtrace_parse___create_grmr_node(lp_grmr_t *, lp_grmr_node_t *, char *);
#ifndef	__sparc
extern int __dtraceenabled_parse___create_grmr_node(void);
#else
extern int __dtraceenabled_parse___create_grmr_node(long);
#endif
extern void __dtrace_parse___create_tok(void *);
#ifndef	__sparc
extern int __dtraceenabled_parse___create_tok(void);
#else
extern int __dtraceenabled_parse___create_tok(long);
#endif
extern void __dtrace_parse___cursor(uint64_t, size_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___cursor(void);
#else
extern int __dtraceenabled_parse___cursor(long);
#endif
extern void __dtrace_parse___destroy_ast_node(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___destroy_ast_node(void);
#else
extern int __dtraceenabled_parse___destroy_ast_node(long);
#endif
extern void __dtrace_parse___destroy_grmr_node(void *, void *);
#ifndef	__sparc
extern int __dtraceenabled_parse___destroy_grmr_node(void);
#else
extern int __dtraceenabled_parse___destroy_grmr_node(long);
#endif
extern void __dtrace_parse___eval_tok(lp_grmr_t *, int, int);
#ifndef	__sparc
extern int __dtraceenabled_parse___eval_tok(void);
#else
extern int __dtraceenabled_parse___eval_tok(long);
#endif
extern void __dtrace_parse___fail(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___fail(void);
#else
extern int __dtraceenabled_parse___fail(long);
#endif
extern void __dtrace_parse___finish_ast_node(lp_grmr_t *, lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___finish_ast_node(void);
#else
extern int __dtraceenabled_parse___finish_ast_node(long);
#endif
extern void __dtrace_parse___got_here(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___got_here(void);
#else
extern int __dtraceenabled_parse___got_here(long);
#endif
extern void __dtrace_parse___grmr_add_child(lp_grmr_t *, char *, char *, uint64_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___grmr_add_child(void);
#else
extern int __dtraceenabled_parse___grmr_add_child(long);
#endif
extern void __dtrace_parse___input_end(lp_ast_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___input_end(void);
#else
extern int __dtraceenabled_parse___input_end(long);
#endif
extern void __dtrace_parse___match(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___match(void);
#else
extern int __dtraceenabled_parse___match(long);
#endif
extern void __dtrace_parse___match_part(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___match_part(void);
#else
extern int __dtraceenabled_parse___match_part(long);
#endif
extern void __dtrace_parse___matched_bits(int, void *, lp_grmr_node_t *, uint64_t, uint64_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___matched_bits(void);
#else
extern int __dtraceenabled_parse___matched_bits(long);
#endif
extern void __dtrace_parse___nesting(lp_ast_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___nesting(void);
#else
extern int __dtraceenabled_parse___nesting(long);
#endif
extern void __dtrace_parse___parse(void);
#ifndef	__sparc
extern int __dtraceenabled_parse___parse(void);
#else
extern int __dtraceenabled_parse___parse(long);
#endif
extern void __dtrace_parse___repeat(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___repeat(void);
#else
extern int __dtraceenabled_parse___repeat(long);
#endif
extern void __dtrace_parse___repeat_retry(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___repeat_retry(void);
#else
extern int __dtraceenabled_parse___repeat_retry(long);
#endif
extern void __dtrace_parse___reset_grmr_node(lp_grmr_t *, lp_grmr_node_t *, char *);
#ifndef	__sparc
extern int __dtraceenabled_parse___reset_grmr_node(void);
#else
extern int __dtraceenabled_parse___reset_grmr_node(long);
#endif
extern void __dtrace_parse___run_grmr_begin(lp_grmr_t *, lp_ast_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___run_grmr_begin(void);
#else
extern int __dtraceenabled_parse___run_grmr_begin(long);
#endif
extern void __dtrace_parse___run_grmr_end(lp_grmr_t *, lp_ast_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___run_grmr_end(void);
#else
extern int __dtraceenabled_parse___run_grmr_end(long);
#endif
extern void __dtrace_parse___set_root(lp_grmr_t *, char *);
#ifndef	__sparc
extern int __dtraceenabled_parse___set_root(void);
#else
extern int __dtraceenabled_parse___set_root(long);
#endif
extern void __dtrace_parse___split(lp_ast_node_t *);
#ifndef	__sparc
extern int __dtraceenabled_parse___split(void);
#else
extern int __dtraceenabled_parse___split(long);
#endif
extern void __dtrace_parse___stack_elems(uint64_t, uint64_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___stack_elems(void);
#else
extern int __dtraceenabled_parse___stack_elems(long);
#endif
extern void __dtrace_parse___test_ast_node(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___test_ast_node(void);
#else
extern int __dtraceenabled_parse___test_ast_node(long);
#endif
extern void __dtrace_parse___test_dfs_cookie(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___test_dfs_cookie(void);
#else
extern int __dtraceenabled_parse___test_dfs_cookie(long);
#endif
extern void __dtrace_parse___test_grmr_node(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___test_grmr_node(void);
#else
extern int __dtraceenabled_parse___test_grmr_node(long);
#endif
extern void __dtrace_parse___test_match(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___test_match(void);
#else
extern int __dtraceenabled_parse___test_match(long);
#endif
extern void __dtrace_parse___test_token(int);
#ifndef	__sparc
extern int __dtraceenabled_parse___test_token(void);
#else
extern int __dtraceenabled_parse___test_token(long);
#endif
extern void __dtrace_parse___trace_ast(lp_ast_t *, lp_ast_node_t *, lp_ast_node_t *, uint64_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___trace_ast(void);
#else
extern int __dtraceenabled_parse___trace_ast(long);
#endif
extern void __dtrace_parse___unmatched_bits(int, void *, lp_grmr_node_t *, uint64_t, uint64_t);
#ifndef	__sparc
extern int __dtraceenabled_parse___unmatched_bits(void);
#else
extern int __dtraceenabled_parse___unmatched_bits(long);
#endif

#else

#define	PARSE_AST_ADD_CHILD(arg0, arg1, arg2)
#define	PARSE_AST_ADD_CHILD_ENABLED() (0)
#define	PARSE_AST_NODE_OFF_END(arg0, arg1)
#define	PARSE_AST_NODE_OFF_END_ENABLED() (0)
#define	PARSE_AST_NODE_OFF_START(arg0, arg1)
#define	PARSE_AST_NODE_OFF_START_ENABLED() (0)
#define	PARSE_AST_POP(arg0)
#define	PARSE_AST_POP_ENABLED() (0)
#define	PARSE_AST_PUSH(arg0)
#define	PARSE_AST_PUSH_ENABLED() (0)
#define	PARSE_AST_REM_CHILD(arg0, arg1, arg2)
#define	PARSE_AST_REM_CHILD_ENABLED() (0)
#define	PARSE_BIND_BEGIN()
#define	PARSE_BIND_BEGIN_ENABLED() (0)
#define	PARSE_BIND_END()
#define	PARSE_BIND_END_ENABLED() (0)
#define	PARSE_CREATE_AST(arg0)
#define	PARSE_CREATE_AST_ENABLED() (0)
#define	PARSE_CREATE_AST_NODE(arg0, arg1)
#define	PARSE_CREATE_AST_NODE_ENABLED() (0)
#define	PARSE_CREATE_GRMR(arg0)
#define	PARSE_CREATE_GRMR_ENABLED() (0)
#define	PARSE_CREATE_GRMR_NODE(arg0, arg1, arg2)
#define	PARSE_CREATE_GRMR_NODE_ENABLED() (0)
#define	PARSE_CREATE_TOK(arg0)
#define	PARSE_CREATE_TOK_ENABLED() (0)
#define	PARSE_CURSOR(arg0, arg1)
#define	PARSE_CURSOR_ENABLED() (0)
#define	PARSE_DESTROY_AST_NODE(arg0)
#define	PARSE_DESTROY_AST_NODE_ENABLED() (0)
#define	PARSE_DESTROY_GRMR_NODE(arg0, arg1)
#define	PARSE_DESTROY_GRMR_NODE_ENABLED() (0)
#define	PARSE_EVAL_TOK(arg0, arg1, arg2)
#define	PARSE_EVAL_TOK_ENABLED() (0)
#define	PARSE_FAIL(arg0)
#define	PARSE_FAIL_ENABLED() (0)
#define	PARSE_FINISH_AST_NODE(arg0, arg1)
#define	PARSE_FINISH_AST_NODE_ENABLED() (0)
#define	PARSE_GOT_HERE(arg0)
#define	PARSE_GOT_HERE_ENABLED() (0)
#define	PARSE_GRMR_ADD_CHILD(arg0, arg1, arg2, arg3)
#define	PARSE_GRMR_ADD_CHILD_ENABLED() (0)
#define	PARSE_INPUT_END(arg0)
#define	PARSE_INPUT_END_ENABLED() (0)
#define	PARSE_MATCH(arg0)
#define	PARSE_MATCH_ENABLED() (0)
#define	PARSE_MATCH_PART(arg0)
#define	PARSE_MATCH_PART_ENABLED() (0)
#define	PARSE_MATCHED_BITS(arg0, arg1, arg2, arg3, arg4)
#define	PARSE_MATCHED_BITS_ENABLED() (0)
#define	PARSE_NESTING(arg0)
#define	PARSE_NESTING_ENABLED() (0)
#define	PARSE_PARSE()
#define	PARSE_PARSE_ENABLED() (0)
#define	PARSE_REPEAT(arg0)
#define	PARSE_REPEAT_ENABLED() (0)
#define	PARSE_REPEAT_RETRY(arg0)
#define	PARSE_REPEAT_RETRY_ENABLED() (0)
#define	PARSE_RESET_GRMR_NODE(arg0, arg1, arg2)
#define	PARSE_RESET_GRMR_NODE_ENABLED() (0)
#define	PARSE_RUN_GRMR_BEGIN(arg0, arg1)
#define	PARSE_RUN_GRMR_BEGIN_ENABLED() (0)
#define	PARSE_RUN_GRMR_END(arg0, arg1)
#define	PARSE_RUN_GRMR_END_ENABLED() (0)
#define	PARSE_SET_ROOT(arg0, arg1)
#define	PARSE_SET_ROOT_ENABLED() (0)
#define	PARSE_SPLIT(arg0)
#define	PARSE_SPLIT_ENABLED() (0)
#define	PARSE_STACK_ELEMS(arg0, arg1)
#define	PARSE_STACK_ELEMS_ENABLED() (0)
#define	PARSE_TEST_AST_NODE(arg0)
#define	PARSE_TEST_AST_NODE_ENABLED() (0)
#define	PARSE_TEST_DFS_COOKIE(arg0)
#define	PARSE_TEST_DFS_COOKIE_ENABLED() (0)
#define	PARSE_TEST_GRMR_NODE(arg0)
#define	PARSE_TEST_GRMR_NODE_ENABLED() (0)
#define	PARSE_TEST_MATCH(arg0)
#define	PARSE_TEST_MATCH_ENABLED() (0)
#define	PARSE_TEST_TOKEN(arg0)
#define	PARSE_TEST_TOKEN_ENABLED() (0)
#define	PARSE_TRACE_AST(arg0, arg1, arg2, arg3)
#define	PARSE_TRACE_AST_ENABLED() (0)
#define	PARSE_UNMATCHED_BITS(arg0, arg1, arg2, arg3, arg4)
#define	PARSE_UNMATCHED_BITS_ENABLED() (0)

#endif


#ifdef	__cplusplus
}
#endif

#endif	/* _PARSE_PROVIDER_H */
